{"pages": [{"title": "API", "path": "docs/api", "body": "<div class=\"section\" id=\"module-cabinet\">\n<span id=\"api\"></span><h1>API</h1>\n<p>This part of the documentation covers all the interfaces of Cabinet.</p>\n<div class=\"section\" id=\"storagecontainer-object\">\n<h2>StorageContainer Object</h2>\n<dl class=\"py class\">\n<dt id=\"cabinet.StorageContainer\">\n<em class=\"property\"><span class=\"pre\">class</span> </em><code class=\"sig-prename descclassname\"><span class=\"pre\">cabinet.</span></code><code class=\"sig-name descname\"><span class=\"pre\">StorageContainer</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">name</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">parent</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">cabinet.storage_container.StorageContainer</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span></dt>\n<dd><p>A class for handling storage configuration and retrieval.</p>\n<p>This is intended to be a singleton and contains global storage\nconfigurations that are lazily populated.</p>\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_delete\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_delete</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">None</span></dt>\n<dd><p>Delete the given filename from the storage container, whether or not\nit exists.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to delete</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_exists\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_exists</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">bool</span></dt>\n<dd><p>Determine if the given path/filename exists in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename with path to determine existence</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>whether the filename exists in the storage container or not</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_finalize_config\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_finalize_config</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">None</span></dt>\n<dd><p>Validate the config and prevent any further config changes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><p><strong>CabinetConfigError</strong> \u2013 If setting handler was unsuccessful</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_get_accessed_time\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_get_accessed_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last access for file in storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve access time</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last access for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_get_created_time\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_get_created_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve creation time for file in storage container given filename.</p>\n<dl class=\"simple\">\n<dt>NOTE: On Unix systems this is the time of last metadata change and on</dt><dd><p>others, such as Windows, is the creation time.</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of creation for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of creation for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_get_modified_time\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_get_modified_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last modification for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of last modification for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last modification for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_handler\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_handler</span></code></dt>\n<dd><p>The asynchronous FileHandler for the StorageContainer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the asynchronous FileHandler</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_ok\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_ok</span></code></dt>\n<dd><p>Determines if this handler can be used asynchronously.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>whether or not it\u2019s okay to use asynchronous methods with this handler</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_save_data\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_save_data</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">bytes</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file from the byte data provided.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to save</p>\n</dd>\n<dt class=\"field-even\">Data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_save_field\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_save_field</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">field</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cgi.FieldStorage</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file stored in a CGI field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>field</strong> \u2013 the CGI field to save</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_save_file\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_save_file</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">BinaryIO</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save the provided file to the given filename in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the name of the file to be saved</p>\n</dd>\n<dt class=\"field-even\">Parma data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.async_size\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_size</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">int</span></dt>\n<dd><p>Retrieve file size for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve size of</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the size, in bytes, of the file in the storage container.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.base_url\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">base_url</span></code></dt>\n<dd><p>The base url for any saved file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the base url</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.delete\">\n<code class=\"sig-name descname\"><span class=\"pre\">delete</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">None</span></dt>\n<dd><p>Delete the given filename from the storage container, whether or not\nit exists.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to delete</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.do_not_use\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">do_not_use</span></code></dt>\n<dd><p>Whether or not to use the StorageContainer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>whether or not the StorageContainer is usable</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.exists\">\n<code class=\"sig-name descname\"><span class=\"pre\">exists</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">bool</span></dt>\n<dd><p>Determine if the given path/filename exists in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename with path to determine existence for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>whether the filename exists in the storage container or not</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.filters\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">filters</span></code></dt>\n<dd><p>List of filters to apply, in order, when saving any file through this handler.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the list, in order, of filters to apply.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.finalized\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">finalized</span></code></dt>\n<dd><p>Determine whether this StorageContainer has been finalized.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>whether this StorageContainer has been finalized or not</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.get_accessed_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_accessed_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last access for file in storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve access time for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last access for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.get_created_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_created_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve creation time for file in storage container given filename.</p>\n<dl class=\"simple\">\n<dt>NOTE: On Unix systems this is the time of last metadata change and on</dt><dd><p>others, such as Windows, is the creation time.</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of creation for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of creation for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.get_item\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_item</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">subpath</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"p\"><span class=\"pre\">\u2026</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">BinaryIO</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.file_item.FileItem</span></dt>\n<dd><p>Returns FileItem object for further manipulation.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>filename</strong> \u2013 the filename for the file</p></li>\n<li><p><strong>subpath</strong> \u2013 the subpath for the file</p></li>\n<li><p><strong>data</strong> \u2013 the data to write to the file</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the FileItem</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.get_modified_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_modified_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last modification for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of last modification for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last modification for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.get_url\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_url</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Return the URL of a given filename in this storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve the url for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the url of the filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.handler\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">handler</span></code></dt>\n<dd><p>The configured handler for this store.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><p><strong>CabinetConfigError</strong> \u2013 If no handler was provided</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.name\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">name</span></code></dt>\n<dd><p>Provide a name for this container based on its lineage.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the StorageContainer</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.path\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">path</span></code></dt>\n<dd><p>The path within the store for any saved file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the path</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.sanitize_filename\">\n<em class=\"property\"><span class=\"pre\">classmethod</span> </em><code class=\"sig-name descname\"><span class=\"pre\">sanitize_filename</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Perform a quick pass to sanitize the filename</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to sanitize</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the sanitized filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.save_data\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_data</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">bytes</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file from the byte data provided.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to save</p>\n</dd>\n<dt class=\"field-even\">Data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.save_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_field</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">field</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cgi.FieldStorage</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file stored in a CGI field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>field</strong> \u2013 the CGI field to save</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.save_file\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_file</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">BinaryIO</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Verifies that the provided filename is legitimate and saves it to the storage\ncontainer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>filename</strong> \u2013 the name of the file to be saved</p></li>\n<li><p><strong>data</strong> \u2013 the data to write to the file</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.size\">\n<code class=\"sig-name descname\"><span class=\"pre\">size</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">int</span></dt>\n<dd><p>Retrieve file size for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve size for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the size, in bytes, of the file in the storage container.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.subfolder\">\n<code class=\"sig-name descname\"><span class=\"pre\">subfolder</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">folder_name</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.handler_base.Folder</span></dt>\n<dd><p>Get a sub-folder for this folder</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>folder_name</strong> \u2013 the folder name to retrieve sub-folder for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the sub-folder</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.sync_handler\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">sync_handler</span></code></dt>\n<dd><p>The synchronous FileHandler for the StorageContainer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the synchronous FileHandler</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageContainer.validate\">\n<code class=\"sig-name descname\"><span class=\"pre\">validate</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Awaitable</span><span class=\"p\"><span class=\"pre\">]</span></span></dt>\n<dd><p>Validate that the configuration is set up properly and the necessary\nlibraries are available.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><p>CabinetConfigError: Error in the configuration</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>list of coroutines or None depending on if filter is asynchronous</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"storagehandlerbase-object\">\n<h2>StorageHandlerBase Object</h2>\n<dl class=\"py class\">\n<dt id=\"cabinet.StorageHandlerBase\">\n<em class=\"property\"><span class=\"pre\">class</span> </em><code class=\"sig-prename descclassname\"><span class=\"pre\">cabinet.</span></code><code class=\"sig-name descname\"><span class=\"pre\">StorageHandlerBase</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">base_url</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filters</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">List</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">cabinet.filter_base.FilterBase</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Union</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"p\"><span class=\"pre\">\u2026</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"pre\">List</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Base class for all storage handlers.</p>\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.base_url\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">base_url</span></code></dt>\n<dd><p>The base url for any saved file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the base url</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.delete\">\n<code class=\"sig-name descname\"><span class=\"pre\">delete</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">None</span></dt>\n<dd><p>Delete the given filename from the storage container, whether or not\nit exists.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to delete</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.exists\">\n<code class=\"sig-name descname\"><span class=\"pre\">exists</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">bool</span></dt>\n<dd><p>Determine if the given path/filename exists in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename with path to determine existence for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>whether the filename exists in the storage container or not</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.filters\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">filters</span></code></dt>\n<dd><p>List of filters to apply, in order, when saving any file through this handler.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the list, in order, of filters to apply.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.get_accessed_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_accessed_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last access for file in storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve access time for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last access for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.get_created_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_created_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve creation time for file in storage container given filename.</p>\n<dl class=\"simple\">\n<dt>NOTE: On Unix systems this is the time of last metadata change and on</dt><dd><p>others, such as Windows, is the creation time.</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of creation for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of creation for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.get_item\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_item</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">subpath</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"p\"><span class=\"pre\">\u2026</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">BinaryIO</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.file_item.FileItem</span></dt>\n<dd><p>Returns FileItem object for further manipulation.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>filename</strong> \u2013 the filename for the file</p></li>\n<li><p><strong>subpath</strong> \u2013 the subpath for the file</p></li>\n<li><p><strong>data</strong> \u2013 the data to write to the file</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the FileItem</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.get_modified_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_modified_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last modification for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of last modification for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last modification for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.get_url\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_url</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Return the URL of a given filename in this storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve the url for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the url of the filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.path\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">path</span></code></dt>\n<dd><p>The path within the store for any saved file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the path</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.sanitize_filename\">\n<em class=\"property\"><span class=\"pre\">classmethod</span> </em><code class=\"sig-name descname\"><span class=\"pre\">sanitize_filename</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Perform a quick pass to sanitize the filename</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to sanitize</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the sanitized filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.save_data\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_data</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">bytes</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file from the byte data provided.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to save</p>\n</dd>\n<dt class=\"field-even\">Data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.save_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_field</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">field</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cgi.FieldStorage</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file stored in a CGI field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>field</strong> \u2013 the CGI field to save</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.save_file\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_file</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">BinaryIO</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Verifies that the provided filename is legitimate and saves it to the storage\ncontainer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>filename</strong> \u2013 the name of the file to be saved</p></li>\n<li><p><strong>data</strong> \u2013 the data to write to the file</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.size\">\n<code class=\"sig-name descname\"><span class=\"pre\">size</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">int</span></dt>\n<dd><p>Retrieve file size for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve size for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the size, in bytes, of the file in the storage container.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.StorageHandlerBase.validate\">\n<code class=\"sig-name descname\"><span class=\"pre\">validate</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Awaitable</span><span class=\"p\"><span class=\"pre\">]</span></span></dt>\n<dd><p>Validate that the configuration is set up properly and the necessary\nlibraries are available.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><p>CabinetConfigError: Error in the configuration</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>list of coroutines or None depending on if filter is asynchronous</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"asyncstoragehandlerbase-object\">\n<h2>AsyncStorageHandlerBase Object</h2>\n<dl class=\"py class\">\n<dt id=\"cabinet.AsyncStorageHandlerBase\">\n<em class=\"property\"><span class=\"pre\">class</span> </em><code class=\"sig-prename descclassname\"><span class=\"pre\">cabinet.</span></code><code class=\"sig-name descname\"><span class=\"pre\">AsyncStorageHandlerBase</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">allow_sync_methods</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Base class for all asynchronous storage handlers.</p>\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_delete\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_delete</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">None</span></dt>\n<dd><p>Delete the given filename from the storage container, whether or not\nit exists.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to delete</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_exists\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_exists</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">bool</span></dt>\n<dd><p>Determine if the given path/filename exists in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename with path to determine existence</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>whether the filename exists in the storage container or not</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_get_accessed_time\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_get_accessed_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last access for file in storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve access time</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last access for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_get_created_time\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_get_created_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve creation time for file in storage container given filename.</p>\n<dl class=\"simple\">\n<dt>NOTE: On Unix systems this is the time of last metadata change and on</dt><dd><p>others, such as Windows, is the creation time.</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of creation for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of creation for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_get_modified_time\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_get_modified_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last modification for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of last modification for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last modification for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_save_data\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_save_data</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">bytes</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file from the byte data provided.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to save</p>\n</dd>\n<dt class=\"field-even\">Data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_save_field\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_save_field</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">field</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cgi.FieldStorage</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file stored in a CGI field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>field</strong> \u2013 the CGI field to save</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_save_file\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_save_file</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">BinaryIO</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save the provided file to the given filename in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the name of the file to be saved</p>\n</dd>\n<dt class=\"field-even\">Parma data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.async_size\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_size</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">int</span></dt>\n<dd><p>Retrieve file size for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve size of</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the size, in bytes, of the file in the storage container.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.base_url\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">base_url</span></code></dt>\n<dd><p>The base url for any saved file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the base url</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.delete\">\n<code class=\"sig-name descname\"><span class=\"pre\">delete</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">None</span></dt>\n<dd><p>Delete the given filename from the storage container, whether or not\nit exists.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to delete</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.exists\">\n<code class=\"sig-name descname\"><span class=\"pre\">exists</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">bool</span></dt>\n<dd><p>Determine if the given path/filename exists in the storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename with path to determine existence for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>whether the filename exists in the storage container or not</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.filters\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">filters</span></code></dt>\n<dd><p>List of filters to apply, in order, when saving any file through this handler.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the list, in order, of filters to apply.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.get_accessed_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_accessed_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last access for file in storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve access time for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last access for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.get_created_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_created_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve creation time for file in storage container given filename.</p>\n<dl class=\"simple\">\n<dt>NOTE: On Unix systems this is the time of last metadata change and on</dt><dd><p>others, such as Windows, is the creation time.</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of creation for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of creation for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.get_item\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_item</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">subpath</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"p\"><span class=\"pre\">\u2026</span></span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">BinaryIO</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.file_item.FileItem</span></dt>\n<dd><p>Returns FileItem object for further manipulation.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>filename</strong> \u2013 the filename for the file</p></li>\n<li><p><strong>subpath</strong> \u2013 the subpath for the file</p></li>\n<li><p><strong>data</strong> \u2013 the data to write to the file</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the FileItem</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.get_modified_time\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_modified_time</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">datetime.datetime</span></dt>\n<dd><p>Retrieve time of last modification for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve time of last modification for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the time of last modification for the given filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.get_url\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_url</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Return the URL of a given filename in this storage container.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve the url for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the url of the filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.path\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">path</span></code></dt>\n<dd><p>The path within the store for any saved file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the path</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.sanitize_filename\">\n<em class=\"property\"><span class=\"pre\">classmethod</span> </em><code class=\"sig-name descname\"><span class=\"pre\">sanitize_filename</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Perform a quick pass to sanitize the filename</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to sanitize</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the sanitized filename</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.save_data\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_data</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">bytes</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file from the byte data provided.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to save</p>\n</dd>\n<dt class=\"field-even\">Data</dt>\n<dd class=\"field-even\"><p>the data to write to the file</p>\n</dd>\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.save_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_field</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">field</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cgi.FieldStorage</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Save a file stored in a CGI field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>field</strong> \u2013 the CGI field to save</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.save_file\">\n<code class=\"sig-name descname\"><span class=\"pre\">save_file</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">BinaryIO</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">str</span></dt>\n<dd><p>Verifies that the provided filename is legitimate and saves it to the storage\ncontainer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>filename</strong> \u2013 the name of the file to be saved</p></li>\n<li><p><strong>data</strong> \u2013 the data to write to the file</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the name of the saved file</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.size\">\n<code class=\"sig-name descname\"><span class=\"pre\">size</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">int</span></dt>\n<dd><p>Retrieve file size for file in storage container given filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>filename</strong> \u2013 the filename to retrieve size for</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>the size, in bytes, of the file in the storage container.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.AsyncStorageHandlerBase.validate\">\n<code class=\"sig-name descname\"><span class=\"pre\">validate</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Awaitable</span><span class=\"p\"><span class=\"pre\">]</span></span></dt>\n<dd><p>Validate that the configuration is set up properly and the necessary\nlibraries are available.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><p>CabinetConfigError: Error in the configuration</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>list of coroutines or None depending on if filter is asynchronous</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"fileitem-object\">\n<h2>FileItem Object</h2>\n<dl class=\"py class\">\n<dt id=\"cabinet.FileItem\">\n<em class=\"property\"><span class=\"pre\">class</span> </em><code class=\"sig-prename descclassname\"><span class=\"pre\">cabinet.</span></code><code class=\"sig-name descname\"><span class=\"pre\">FileItem</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">path</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"p\"><span class=\"pre\">\u2026</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">()</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">BinaryIO</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">media_type</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">]</span></span></span> <span class=\"o\"><span class=\"pre\">=</span></span> <span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Base file object used by cabinet</p>\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.content_type\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">content_type</span></code></dt>\n<dd><p>The inferred content type of the FileItem.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the content type</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.copy\">\n<code class=\"sig-name descname\"><span class=\"pre\">copy</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.file_item.FileItem</span></dt>\n<dd><p>Creates a copy of a given FileItem.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the copied FileItem</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.count\">\n<code class=\"sig-name descname\"><span class=\"pre\">count</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">/</span></span></em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Return number of occurrences of value.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt id=\"cabinet.FileItem.data\">\n<code class=\"sig-name descname\"><span class=\"pre\">data</span></code><em class=\"property\"><span class=\"pre\">:</span> <span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">BinaryIO</span><span class=\"p\"><span class=\"pre\">]</span></span></em></dt>\n<dd><p>Alias for field number 2</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt id=\"cabinet.FileItem.filename\">\n<code class=\"sig-name descname\"><span class=\"pre\">filename</span></code><em class=\"property\"><span class=\"pre\">:</span> <span class=\"pre\">str</span></em></dt>\n<dd><p>Alias for field number 0</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.fs_path\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">fs_path</span></code></dt>\n<dd><p>A relative file system path string for this path/filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the relative file system path for the FileItem</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.has_data\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">has_data</span></code></dt>\n<dd><p>Property to check whether or not the FileItem has data or not.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>whether or not the FileItem has data</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.index\">\n<code class=\"sig-name descname\"><span class=\"pre\">index</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">stop</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">9223372036854775807</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">/</span></span></em><span class=\"sig-paren\">)</span></dt>\n<dd><p>Return first index of value.</p>\n<p>Raises ValueError if the value is not present.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt id=\"cabinet.FileItem.media_type\">\n<code class=\"sig-name descname\"><span class=\"pre\">media_type</span></code><em class=\"property\"><span class=\"pre\">:</span> <span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">]</span></span></em></dt>\n<dd><p>Alias for field number 3</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt id=\"cabinet.FileItem.path\">\n<code class=\"sig-name descname\"><span class=\"pre\">path</span></code><em class=\"property\"><span class=\"pre\">:</span> <span class=\"pre\">Tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">str</span><span class=\"p\"><span class=\"pre\">,</span> </span><span class=\"p\"><span class=\"pre\">\u2026</span></span><span class=\"p\"><span class=\"pre\">]</span></span></em></dt>\n<dd><p>Alias for field number 1</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FileItem.url_path\">\n<em class=\"property\"><span class=\"pre\">property</span> </em><code class=\"sig-name descname\"><span class=\"pre\">url_path</span></code></dt>\n<dd><p>A relative URL path string for this path/filename.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>the relative url path for the FileItem</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"filterbase-object\">\n<h2>FilterBase Object</h2>\n<dl class=\"py class\">\n<dt id=\"cabinet.FilterBase\">\n<em class=\"property\"><span class=\"pre\">class</span> </em><code class=\"sig-prename descclassname\"><span class=\"pre\">cabinet.</span></code><code class=\"sig-name descname\"><span class=\"pre\">FilterBase</span></code></dt>\n<dd><p>The base filter class used by all filters</p>\n<dl class=\"py method\">\n<dt id=\"cabinet.FilterBase.async_call\">\n<em class=\"property\"><span class=\"pre\">async</span> </em><code class=\"sig-name descname\"><span class=\"pre\">async_call</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">item</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cabinet.file_item.FileItem</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.file_item.FileItem</span></dt>\n<dd><p>Apply the filter asynchronously</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>item</strong> \u2013 the item to apply filter to.</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>FileItem that filter has been applied to or an awaitable</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FilterBase.call\">\n<code class=\"sig-name descname\"><span class=\"pre\">call</span></code><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">item</span></span><span class=\"p\"><span class=\"pre\">:</span></span> <span class=\"n\"><span class=\"pre\">cabinet.file_item.FileItem</span></span></em><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">cabinet.file_item.FileItem</span></dt>\n<dd><p>Apply the filter synchronously</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>item</strong> \u2013 the item to apply filter to.</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>FileItem that filter has been applied to or an awaitable</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt id=\"cabinet.FilterBase.validate\">\n<code class=\"sig-name descname\"><span class=\"pre\">validate</span></code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; <span class=\"pre\">Optional</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">Awaitable</span><span class=\"p\"><span class=\"pre\">]</span></span></dt>\n<dd><p>Validates the filter configuration</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n</div>\n"}], "index": {"body": "<div class=\"section\" id=\"welcome-to-cabinet\">\n<h1>Welcome to Cabinet</h1>\n<div class=\"toctree-wrapper compound\">\n</div>\n<div class=\"section\" id=\"api-reference\">\n<h2>API Reference</h2>\n<p>If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you.</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/\">API</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/#storagecontainer-object\">StorageContainer Object</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/#storagehandlerbase-object\">StorageHandlerBase Object</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/#asyncstoragehandlerbase-object\">AsyncStorageHandlerBase Object</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/#fileitem-object\">FileItem Object</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/#filterbase-object\">FilterBase Object</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n"}}
